// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for RoundStatus.
const (
	Revealed RoundStatus = "revealed"
	Voting   RoundStatus = "voting"
)

// Defines values for ScaleType.
const (
	Custom     ScaleType = "custom"
	Fibonacci  ScaleType = "fibonacci"
	PowerOfTwo ScaleType = "power-of-two"
	TShirt     ScaleType = "t-shirt"
)

// CreateSessionRequest セッション作成リクエスト
type CreateSessionRequest struct {
	// CustomScale カスタムスケール（scaleTypeがcustomの場合のみ有効）
	CustomScale *[]string `json:"customScale,omitempty"`

	// HostName ホスト名
	HostName string `json:"hostName"`

	// ScaleType スケールの種類
	ScaleType ScaleType `json:"scaleType"`
}

// CreateSessionResponse セッション作成レスポンス
type CreateSessionResponse struct {
	// HostId セッションのホストID
	HostId string `json:"hostId"`

	// SessionId 作成されたセッションのID
	SessionId string `json:"sessionId"`
}

// EndSessionResponse セッション終了レスポンス
type EndSessionResponse = map[string]interface{}

// ErrorResponse エラーレスポンス
type ErrorResponse struct {
	// Message エラーメッセージ
	Message string `json:"message"`
}

// GetRoundResponse ラウンド情報取得レスポンス
type GetRoundResponse struct {
	// Round ラウンド情報
	Round Round `json:"round"`
}

// GetSessionResponse セッション取得レスポンス
type GetSessionResponse struct {
	// Session セッション情報
	Session Session `json:"session"`
}

// JoinSessionRequest セッション参加リクエスト
type JoinSessionRequest struct {
	// Name 参加者の名前
	Name string `json:"name"`
}

// JoinSessionResponse セッション参加レスポンス
type JoinSessionResponse struct {
	// ParticipantId 参加者のID
	ParticipantId string `json:"participantId"`
}

// RevealRoundResponse ラウンド結果公開レスポンス
type RevealRoundResponse = map[string]interface{}

// Round ラウンド情報
type Round struct {
	// CreatedAt ラウンドの作成日時
	CreatedAt time.Time `json:"createdAt"`

	// RoundId ラウンドのID
	RoundId string `json:"roundId"`

	// SessionId このラウンドが属するセッションのID
	SessionId string `json:"sessionId"`

	// Status ラウンドの状態
	Status RoundStatus `json:"status"`

	// Summary 投票結果の要約
	Summary *RoundSummary `json:"summary,omitempty"`

	// UpdatedAt ラウンドの最終更新日時
	UpdatedAt time.Time `json:"updatedAt"`

	// Votes 投票結果のリスト
	Votes []Vote `json:"votes"`
}

// RoundStatus ラウンドの状態
type RoundStatus string

// RoundSummary 投票結果の要約
type RoundSummary struct {
	// Average 投票値の平均（未投票、不明除く）
	Average float32 `json:"average"`

	// Max 投票値の最大値（未投票、不明除く）
	Max float32 `json:"max"`

	// Median 投票値の中央値（未投票、不明除く）
	Median float32 `json:"median"`

	// Min 投票値の最小値（未投票、不明除く）
	Min float32 `json:"min"`

	// VoteCounts 選択肢ごとの投票数
	VoteCounts []VoteCount `json:"voteCounts"`
}

// ScaleType スケールの種類
type ScaleType string

// SendVoteRequest 投票送信リクエスト
type SendVoteRequest struct {
	// ParticipantId 投票者のID
	ParticipantId string `json:"participantId"`

	// Value 投票値
	Value string `json:"value"`
}

// SendVoteResponse 投票送信レスポンス
type SendVoteResponse struct {
	// VoteId 投票ID
	VoteId string `json:"voteId"`
}

// Session セッション情報
type Session struct {
	// CreatedAt セッションの作成日時
	CreatedAt time.Time `json:"createdAt"`

	// CurrentRoundId 現在のラウンドID
	CurrentRoundId *string `json:"currentRoundId,omitempty"`

	// CustomScale カスタムスケール（scaleTypeがcustomの場合のみ有効）
	CustomScale []string `json:"customScale"`

	// HostId セッションのホストID
	HostId string `json:"hostId"`

	// Participants 参加者リスト
	Participants []SessionParticipant `json:"participants"`

	// ScaleType スケールの種類
	ScaleType ScaleType `json:"scaleType"`

	// SessionId セッションのID
	SessionId string `json:"sessionId"`

	// Status セッションの状態
	Status string `json:"status"`

	// UpdatedAt セッションの最終更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// SessionParticipant セッション参加者
type SessionParticipant struct {
	// Name 参加者の名前
	Name string `json:"name"`

	// ParticipantId 参加者のID
	ParticipantId string `json:"participantId"`
}

// StartRoundResponse ラウンド開始レスポンス
type StartRoundResponse struct {
	// RoundId 開始されたラウンドのID
	RoundId string `json:"roundId"`
}

// Vote 投票情報
type Vote struct {
	// ParticipantId 参加者のID
	ParticipantId string `json:"participantId"`

	// ParticipantName 参加者名
	ParticipantName string `json:"participantName"`

	// Value 投票値（参加者自身もしくはラウンドのstatusがrevealedの場合のみ）
	Value *string `json:"value,omitempty"`
}

// VoteCount 選択肢ごとの投票数
type VoteCount struct {
	// Count 投票数
	Count int `json:"count"`

	// Participants 投票者リスト
	Participants []SessionParticipant `json:"participants"`

	// Value 投票値
	Value string `json:"value"`
}

// GetApiPlanningPokerRoundsRoundIdParams defines parameters for GetApiPlanningPokerRoundsRoundId.
type GetApiPlanningPokerRoundsRoundIdParams struct {
	// ParticipantId 取得したい投票情報の参加者ID。指定しない場合は、revealed状態であれば全参加者の投票情報を返す。
	ParticipantId *string `form:"participantId,omitempty" json:"participantId,omitempty"`
}

// PostApiPlanningPokerRoundsRoundIdVotesJSONRequestBody defines body for PostApiPlanningPokerRoundsRoundIdVotes for application/json ContentType.
type PostApiPlanningPokerRoundsRoundIdVotesJSONRequestBody = SendVoteRequest

// PostApiPlanningPokerSessionsJSONRequestBody defines body for PostApiPlanningPokerSessions for application/json ContentType.
type PostApiPlanningPokerSessionsJSONRequestBody = CreateSessionRequest

// PostApiPlanningPokerSessionsSessionIdParticipantsJSONRequestBody defines body for PostApiPlanningPokerSessionsSessionIdParticipants for application/json ContentType.
type PostApiPlanningPokerSessionsSessionIdParticipantsJSONRequestBody = JoinSessionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ラウンド情報を取得する
	// (GET /api/planning-poker/rounds/{roundId})
	GetApiPlanningPokerRoundsRoundId(ctx echo.Context, roundId string, params GetApiPlanningPokerRoundsRoundIdParams) error
	// ラウンドを終了する
	// (POST /api/planning-poker/rounds/{roundId}/reveal)
	PostApiPlanningPokerRoundsRoundIdReveal(ctx echo.Context, roundId string) error
	// 投票を送信する
	// (POST /api/planning-poker/rounds/{roundId}/votes)
	PostApiPlanningPokerRoundsRoundIdVotes(ctx echo.Context, roundId string) error
	// セッションを作成する
	// (POST /api/planning-poker/sessions)
	PostApiPlanningPokerSessions(ctx echo.Context) error
	// セッションを取得する
	// (GET /api/planning-poker/sessions/{sessionId})
	GetApiPlanningPokerSessionsSessionId(ctx echo.Context, sessionId string) error
	// セッションを終了する
	// (POST /api/planning-poker/sessions/{sessionId}/end)
	PostApiPlanningPokerSessionsSessionIdEnd(ctx echo.Context, sessionId string) error
	// セッションに参加する
	// (POST /api/planning-poker/sessions/{sessionId}/participants)
	PostApiPlanningPokerSessionsSessionIdParticipants(ctx echo.Context, sessionId string) error
	// ラウンドを開始する
	// (POST /api/planning-poker/sessions/{sessionId}/rounds)
	PostApiPlanningPokerSessionsSessionIdRounds(ctx echo.Context, sessionId string) error
	// リアルタイム更新のための WebSocket エンドポイント
	// (GET /api/planning-poker/ws)
	GetApiPlanningPokerWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiPlanningPokerRoundsRoundId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiPlanningPokerRoundsRoundId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roundId" -------------
	var roundId string

	err = runtime.BindStyledParameterWithOptions("simple", "roundId", ctx.Param("roundId"), &roundId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roundId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiPlanningPokerRoundsRoundIdParams
	// ------------- Optional query parameter "participantId" -------------

	err = runtime.BindQueryParameter("form", true, false, "participantId", ctx.QueryParams(), &params.ParticipantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participantId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiPlanningPokerRoundsRoundId(ctx, roundId, params)
	return err
}

// PostApiPlanningPokerRoundsRoundIdReveal converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiPlanningPokerRoundsRoundIdReveal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roundId" -------------
	var roundId string

	err = runtime.BindStyledParameterWithOptions("simple", "roundId", ctx.Param("roundId"), &roundId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roundId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiPlanningPokerRoundsRoundIdReveal(ctx, roundId)
	return err
}

// PostApiPlanningPokerRoundsRoundIdVotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiPlanningPokerRoundsRoundIdVotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roundId" -------------
	var roundId string

	err = runtime.BindStyledParameterWithOptions("simple", "roundId", ctx.Param("roundId"), &roundId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roundId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiPlanningPokerRoundsRoundIdVotes(ctx, roundId)
	return err
}

// PostApiPlanningPokerSessions converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiPlanningPokerSessions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiPlanningPokerSessions(ctx)
	return err
}

// GetApiPlanningPokerSessionsSessionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiPlanningPokerSessionsSessionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", ctx.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiPlanningPokerSessionsSessionId(ctx, sessionId)
	return err
}

// PostApiPlanningPokerSessionsSessionIdEnd converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiPlanningPokerSessionsSessionIdEnd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", ctx.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiPlanningPokerSessionsSessionIdEnd(ctx, sessionId)
	return err
}

// PostApiPlanningPokerSessionsSessionIdParticipants converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiPlanningPokerSessionsSessionIdParticipants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", ctx.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiPlanningPokerSessionsSessionIdParticipants(ctx, sessionId)
	return err
}

// PostApiPlanningPokerSessionsSessionIdRounds converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiPlanningPokerSessionsSessionIdRounds(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionId", ctx.Param("sessionId"), &sessionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiPlanningPokerSessionsSessionIdRounds(ctx, sessionId)
	return err
}

// GetApiPlanningPokerWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiPlanningPokerWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiPlanningPokerWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/planning-poker/rounds/:roundId", wrapper.GetApiPlanningPokerRoundsRoundId)
	router.POST(baseURL+"/api/planning-poker/rounds/:roundId/reveal", wrapper.PostApiPlanningPokerRoundsRoundIdReveal)
	router.POST(baseURL+"/api/planning-poker/rounds/:roundId/votes", wrapper.PostApiPlanningPokerRoundsRoundIdVotes)
	router.POST(baseURL+"/api/planning-poker/sessions", wrapper.PostApiPlanningPokerSessions)
	router.GET(baseURL+"/api/planning-poker/sessions/:sessionId", wrapper.GetApiPlanningPokerSessionsSessionId)
	router.POST(baseURL+"/api/planning-poker/sessions/:sessionId/end", wrapper.PostApiPlanningPokerSessionsSessionIdEnd)
	router.POST(baseURL+"/api/planning-poker/sessions/:sessionId/participants", wrapper.PostApiPlanningPokerSessionsSessionIdParticipants)
	router.POST(baseURL+"/api/planning-poker/sessions/:sessionId/rounds", wrapper.PostApiPlanningPokerSessionsSessionIdRounds)
	router.GET(baseURL+"/api/planning-poker/ws", wrapper.GetApiPlanningPokerWs)

}
