// Code generated by MockGen. DO NOT EDIT.
// Source: ../vote.go
//
// Generated by this command:
//
//	mockgen -source=../vote.go -destination=./vote.go
//

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"

	model "github.com/canpok1/web-toolbox/backend/internal/planningpoker/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockVoteRepository is a mock of VoteRepository interface.
type MockVoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVoteRepositoryMockRecorder
	isgomock struct{}
}

// MockVoteRepositoryMockRecorder is the mock recorder for MockVoteRepository.
type MockVoteRepositoryMockRecorder struct {
	mock *MockVoteRepository
}

// NewMockVoteRepository creates a new mock instance.
func NewMockVoteRepository(ctrl *gomock.Controller) *MockVoteRepository {
	mock := &MockVoteRepository{ctrl: ctrl}
	mock.recorder = &MockVoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteRepository) EXPECT() *MockVoteRepositoryMockRecorder {
	return m.recorder
}

// AddVoteToRound mocks base method.
func (m *MockVoteRepository) AddVoteToRound(ctx context.Context, roundId, voteId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVoteToRound", ctx, roundId, voteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVoteToRound indicates an expected call of AddVoteToRound.
func (mr *MockVoteRepositoryMockRecorder) AddVoteToRound(ctx, roundId, voteId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVoteToRound", reflect.TypeOf((*MockVoteRepository)(nil).AddVoteToRound), ctx, roundId, voteId)
}

// CreateVote mocks base method.
func (m *MockVoteRepository) CreateVote(ctx context.Context, voteId string, vote model.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", ctx, voteId, vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockVoteRepositoryMockRecorder) CreateVote(ctx, voteId, vote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockVoteRepository)(nil).CreateVote), ctx, voteId, vote)
}

// GetVote mocks base method.
func (m *MockVoteRepository) GetVote(ctx context.Context, voteId string) (*model.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVote", ctx, voteId)
	ret0, _ := ret[0].(*model.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVote indicates an expected call of GetVote.
func (mr *MockVoteRepositoryMockRecorder) GetVote(ctx, voteId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVote", reflect.TypeOf((*MockVoteRepository)(nil).GetVote), ctx, voteId)
}

// GetVoteIdByRoundIdAndParticipantId mocks base method.
func (m *MockVoteRepository) GetVoteIdByRoundIdAndParticipantId(ctx context.Context, roundId, participantId string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoteIdByRoundIdAndParticipantId", ctx, roundId, participantId)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoteIdByRoundIdAndParticipantId indicates an expected call of GetVoteIdByRoundIdAndParticipantId.
func (mr *MockVoteRepositoryMockRecorder) GetVoteIdByRoundIdAndParticipantId(ctx, roundId, participantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoteIdByRoundIdAndParticipantId", reflect.TypeOf((*MockVoteRepository)(nil).GetVoteIdByRoundIdAndParticipantId), ctx, roundId, participantId)
}

// GetVotesInRound mocks base method.
func (m *MockVoteRepository) GetVotesInRound(ctx context.Context, roundId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesInRound", ctx, roundId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesInRound indicates an expected call of GetVotesInRound.
func (mr *MockVoteRepositoryMockRecorder) GetVotesInRound(ctx, roundId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesInRound", reflect.TypeOf((*MockVoteRepository)(nil).GetVotesInRound), ctx, roundId)
}

// UpdateVote mocks base method.
func (m *MockVoteRepository) UpdateVote(ctx context.Context, voteId string, vote model.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVote", ctx, voteId, vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVote indicates an expected call of UpdateVote.
func (mr *MockVoteRepositoryMockRecorder) UpdateVote(ctx, voteId, vote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVote", reflect.TypeOf((*MockVoteRepository)(nil).UpdateVote), ctx, voteId, vote)
}
