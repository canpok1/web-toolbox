// Code generated by MockGen. DO NOT EDIT.
// Source: ../round.go
//
// Generated by this command:
//
//	mockgen -source=../round.go -destination=./round.go
//

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"

	model "github.com/canpok1/web-toolbox/backend/internal/planningpoker/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRoundRepository is a mock of RoundRepository interface.
type MockRoundRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoundRepositoryMockRecorder
	isgomock struct{}
}

// MockRoundRepositoryMockRecorder is the mock recorder for MockRoundRepository.
type MockRoundRepositoryMockRecorder struct {
	mock *MockRoundRepository
}

// NewMockRoundRepository creates a new mock instance.
func NewMockRoundRepository(ctrl *gomock.Controller) *MockRoundRepository {
	mock := &MockRoundRepository{ctrl: ctrl}
	mock.recorder = &MockRoundRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundRepository) EXPECT() *MockRoundRepositoryMockRecorder {
	return m.recorder
}

// CreateRound mocks base method.
func (m *MockRoundRepository) CreateRound(ctx context.Context, roundId string, round model.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRound", ctx, roundId, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRound indicates an expected call of CreateRound.
func (mr *MockRoundRepositoryMockRecorder) CreateRound(ctx, roundId, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRound", reflect.TypeOf((*MockRoundRepository)(nil).CreateRound), ctx, roundId, round)
}

// GetRound mocks base method.
func (m *MockRoundRepository) GetRound(ctx context.Context, roundId string) (*model.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", ctx, roundId)
	ret0, _ := ret[0].(*model.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRound indicates an expected call of GetRound.
func (mr *MockRoundRepositoryMockRecorder) GetRound(ctx, roundId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockRoundRepository)(nil).GetRound), ctx, roundId)
}

// UpdateRound mocks base method.
func (m *MockRoundRepository) UpdateRound(ctx context.Context, roundId string, round model.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRound", ctx, roundId, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRound indicates an expected call of UpdateRound.
func (mr *MockRoundRepositoryMockRecorder) UpdateRound(ctx, roundId, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRound", reflect.TypeOf((*MockRoundRepository)(nil).UpdateRound), ctx, roundId, round)
}
