// Code generated by MockGen. DO NOT EDIT.
// Source: ../participant.go
//
// Generated by this command:
//
//	mockgen -source=../participant.go -destination=./participant.go
//

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"

	model "github.com/canpok1/web-toolbox/backend/internal/planningpoker/model"
	gomock "go.uber.org/mock/gomock"
)

// MockParticipantRepository is a mock of ParticipantRepository interface.
type MockParticipantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantRepositoryMockRecorder
	isgomock struct{}
}

// MockParticipantRepositoryMockRecorder is the mock recorder for MockParticipantRepository.
type MockParticipantRepositoryMockRecorder struct {
	mock *MockParticipantRepository
}

// NewMockParticipantRepository creates a new mock instance.
func NewMockParticipantRepository(ctrl *gomock.Controller) *MockParticipantRepository {
	mock := &MockParticipantRepository{ctrl: ctrl}
	mock.recorder = &MockParticipantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipantRepository) EXPECT() *MockParticipantRepositoryMockRecorder {
	return m.recorder
}

// AddParticipantToSession mocks base method.
func (m *MockParticipantRepository) AddParticipantToSession(ctx context.Context, sessionId, participantId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipantToSession", ctx, sessionId, participantId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParticipantToSession indicates an expected call of AddParticipantToSession.
func (mr *MockParticipantRepositoryMockRecorder) AddParticipantToSession(ctx, sessionId, participantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipantToSession", reflect.TypeOf((*MockParticipantRepository)(nil).AddParticipantToSession), ctx, sessionId, participantId)
}

// CreateParticipant mocks base method.
func (m *MockParticipantRepository) CreateParticipant(ctx context.Context, participantId string, participant model.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParticipant", ctx, participantId, participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParticipant indicates an expected call of CreateParticipant.
func (mr *MockParticipantRepositoryMockRecorder) CreateParticipant(ctx, participantId, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipant", reflect.TypeOf((*MockParticipantRepository)(nil).CreateParticipant), ctx, participantId, participant)
}

// GetParticipant mocks base method.
func (m *MockParticipantRepository) GetParticipant(ctx context.Context, participantId string) (*model.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", ctx, participantId)
	ret0, _ := ret[0].(*model.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant.
func (mr *MockParticipantRepositoryMockRecorder) GetParticipant(ctx, participantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockParticipantRepository)(nil).GetParticipant), ctx, participantId)
}

// GetParticipantsInSession mocks base method.
func (m *MockParticipantRepository) GetParticipantsInSession(ctx context.Context, sessionId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantsInSession", ctx, sessionId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantsInSession indicates an expected call of GetParticipantsInSession.
func (mr *MockParticipantRepositoryMockRecorder) GetParticipantsInSession(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantsInSession", reflect.TypeOf((*MockParticipantRepository)(nil).GetParticipantsInSession), ctx, sessionId)
}

// UpdateParticipant mocks base method.
func (m *MockParticipantRepository) UpdateParticipant(ctx context.Context, participantId string, participant model.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipant", ctx, participantId, participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateParticipant indicates an expected call of UpdateParticipant.
func (mr *MockParticipantRepositoryMockRecorder) UpdateParticipant(ctx, participantId, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipant", reflect.TypeOf((*MockParticipantRepository)(nil).UpdateParticipant), ctx, participantId, participant)
}
